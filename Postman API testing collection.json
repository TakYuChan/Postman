{
	"info": {
		"_postman_id": "fd5667e8-7762-480f-a61e-17df3d5a3a35",
		"name": "Demonstration",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "1 - can normally register with correct username and password",
			"item": [
				{
					"name": "should register an account with valid username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b32d81e-c1a6-4193-8c3f-32135e75c642",
								"exec": [
									"//0: Variables",
									"",
									"//0.1: local variables",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10161\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"",
									"//0.2: Set Environment Variable",
									"var jsonData = JSON.parse(responseBody);",
									"",
									"pm.globals.set(\"accountNumber\", jsonData.datas.accountNumber);",
									"",
									"//1.0: Assertion Test",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    // pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"//Check if \"Success! \" msg is sent as response",
									"",
									"pm.test(\"Verify the registration success or not and to see if account number returned\", function ()",
									"{",
									"   pm.expect(jsonData.message).eql(\"Success！\");",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d451272-34ff-4f31-9f2b-2e08ba31a844",
								"exec": [
									"//0: Variables",
									"",
									"//0.1: API request data",
									"",
									"//username and password",
									"pm.globals.set(\"username\", (\"username\" + (Math.random() * Math.pow(6, 5)).toString()).slice(0, 20));",
									"",
									"pm.globals.set(\"password\", (\"xxx\" + (Math.random() * Math.pow(6, 5)).toString()).slice(0, 20));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "TEARDOWN should delete the account with valid account number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f723202f-37ca-4286-ba39-af30b6089b68",
								"exec": [
									"//variable",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"null\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"default\": null,",
									"      \"examples\": [",
									"        null",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"",
									"//Assertion tests",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify the response msg\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "a4db18cc-f43c-457a-bc3f-1840926cb72b",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/delete?account_number={{accountNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"delete"
							],
							"query": [
								{
									"key": "account_number",
									"value": "{{accountNumber}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "2 - User can not register with a registered account",
			"item": [
				{
					"name": "should register an account with valid username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b32d81e-c1a6-4193-8c3f-32135e75c642",
								"exec": [
									"//0: Variables",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10161\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//0.1: Environment Variable",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"accountNumber\", jsonData.datas.accountNumber);",
									"",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"//Check if \"Success! \" msg is sent as response",
									"",
									"pm.test(\"Verify the registration success or not and to see if account number returned\", function ()",
									"{",
									"   pm.expect(jsonData.message).eql(\"Success！\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d451272-34ff-4f31-9f2b-2e08ba31a844",
								"exec": [
									"//username and password",
									"pm.globals.set(\"username\", (\"random\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));",
									"",
									"pm.globals.set(\"password\", (\"randomPassword\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "register an account with registered username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b32d81e-c1a6-4193-8c3f-32135e75c642",
								"exec": [
									"//Variable",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"error\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        0",
									"      ]",
									"    },",
									"    \"error\": {",
									"      \"$id\": \"#/properties/error\",",
									"      \"type\": \"boolean\",",
									"      \"title\": \"The Error Schema\",",
									"      \"default\": false,",
									"      \"examples\": [",
									"        true",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Error：Registered account！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//response json",
									"const jsonData = pm.response.json();",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//1.0: Verification test",
									"pm.test(\"Verify error msg\", function ()",
									"{",
									"    pm.expect(jsonData.message).to.eql(\"Error：Registered account！\");",
									"});",
									"",
									"pm.test(\"Verify error is true\", function ()",
									"{",
									"    pm.expect(jsonData.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify jsonData\", function (){",
									"    pm.expect(tv4.validate(jsonData, schema)); ",
									"});",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "frankyda1111sdasd",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "TEARDOWN should delete the account with valid account number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "9d985790-c996-4757-a0a6-9c6ec78cf4d1",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"null\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"default\": null,",
									"      \"examples\": [",
									"        null",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//Assertion tests",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify the response msg\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									"",
									"// pm.test(\"test01\", function(){",
									"//   pm.expect(tv4.validate(jsonData, \"{{schema_del}}\")).to.be.true; ",
									"// });",
									"",
									"//console.log(\"{{schema_del}}\");"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "d034816e-92d4-441e-b805-92997fd5fdbc",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/delete?account_number={{accountNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"delete"
							],
							"query": [
								{
									"key": "account_number",
									"value": "{{accountNumber}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "3 - User can use the deleted username to register again",
			"item": [
				{
					"name": "should register an account with valid username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b32d81e-c1a6-4193-8c3f-32135e75c642",
								"exec": [
									"//0: Variables",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10161\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//0.1: Environment Variable",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"accountNumber\", jsonData.datas.accountNumber);",
									"",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"//Check if \"Success! \" msg is sent as response",
									"",
									"pm.test(\"Verify the registration success or not and to see if account number returned\", function ()",
									"{",
									"   pm.expect(jsonData.message).eql(\"Success！\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d451272-34ff-4f31-9f2b-2e08ba31a844",
								"exec": [
									"//username and password",
									"pm.globals.set(\"username\", (\"random\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));",
									"",
									"pm.globals.set(\"password\", (\"randomPassword\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));",
									"",
									"// pm.environment.set(\"username\", \"frankyvenus10\");",
									"// pm.environment.set(\"password\", \"frankyda111\");"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "user can delete the account with valid account number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f723202f-37ca-4286-ba39-af30b6089b68",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"null\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"default\": null,",
									"      \"examples\": [",
									"        null",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//Assertion tests",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify the response msg\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8c9d298a-0ea9-4914-9f89-92c0700f5384",
								"exec": [
									"// //Variable",
									"// var schema = {",
									"//   \"definitions\": {},",
									"//   \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"//   \"$id\": \"http://example.com/root.json\",",
									"//   \"type\": \"object\",",
									"//   \"title\": \"The Root Schema\",",
									"//   \"required\": [",
									"//     \"code\",",
									"//     \"datas\",",
									"//     \"message\"",
									"//   ],",
									"//   \"properties\": {",
									"//     \"code\": {",
									"//       \"$id\": \"#/properties/code\",",
									"//       \"type\": \"integer\",",
									"//       \"title\": \"The Code Schema\",",
									"//       \"default\": 0,",
									"//       \"examples\": [",
									"//         200",
									"//       ]",
									"//     },",
									"//     \"datas\": {",
									"//       \"$id\": \"#/properties/datas\",",
									"//       \"type\": \"null\",",
									"//       \"title\": \"The Datas Schema\",",
									"//       \"default\": null,",
									"//       \"examples\": [",
									"//         null",
									"//       ]",
									"//     },",
									"//     \"message\": {",
									"//       \"$id\": \"#/properties/message\",",
									"//       \"type\": \"string\",",
									"//       \"title\": \"The Message Schema\",",
									"//       \"default\": \"\",",
									"//       \"examples\": [",
									"//         \"Success！\"",
									"//       ],",
									"//       \"pattern\": \"^(.*)$\"",
									"//     }",
									"//   }",
									"// }",
									"",
									"// //Environment Variable",
									"// pm.environment.set(\"delSchema\", schema);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/delete?account_number={{accountNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"delete"
							],
							"query": [
								{
									"key": "account_number",
									"value": "{{accountNumber}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "should register an account with valid username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b32d81e-c1a6-4193-8c3f-32135e75c642",
								"exec": [
									"//Variable",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10161\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//Environment Variable",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"accountNumber\", jsonData.datas.accountNumber);",
									"",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"",
									"//Check if \"Success! \" msg is sent as response",
									"",
									"pm.test(\"Verify the registration success or not and to see if account number returned\", function ()",
									"{",
									"   pm.expect(jsonData.message).eql(\"Success！\");",
									"});",
									"",
									"pm.test(\"Verify responseBody\", function() {",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "TEARDOWN should delete the account with valid account number Copy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f723202f-37ca-4286-ba39-af30b6089b68",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"null\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"default\": null,",
									"      \"examples\": [",
									"        null",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"//Assertion tests",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify the response msg\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "4fef9032-1a87-4823-8648-4f72a6a1f560",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/delete?account_number={{accountNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"delete"
							],
							"query": [
								{
									"key": "account_number",
									"value": "{{accountNumber}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "4 - User can not log in with invalid username and password",
			"item": [
				{
					"name": "should register an account with valid username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b32d81e-c1a6-4193-8c3f-32135e75c642",
								"exec": [
									"//0: Variables",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10161\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//0.1: Environment Variable",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"accountNumber\", jsonData.datas.accountNumber);",
									"",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"//Check if \"Success! \" msg is sent as response",
									"",
									"pm.test(\"Verify the registration success or not and to see if account number returned\", function ()",
									"{",
									"   pm.expect(jsonData.message).eql(\"Success！\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d451272-34ff-4f31-9f2b-2e08ba31a844",
								"exec": [
									"//username and password",
									"pm.globals.set(\"username\", (\"random\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));",
									"",
									"pm.globals.set(\"password\", (\"randomPassword\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "User can not log in with invalid username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebe7ee6e-d3b0-42cf-bdfb-978ba873853b",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"error\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        0",
									"      ]",
									"    },",
									"    \"error\": {",
									"      \"$id\": \"#/properties/error\",",
									"      \"type\": \"boolean\",",
									"      \"title\": \"The Error Schema\",",
									"      \"default\": false,",
									"      \"examples\": [",
									"        true",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Error：Error in username or password！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"//1.0 Assertion tests",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"error is true\", function ()",
									"{",
									"    pm.expect(jsonData.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify response message for invalid username\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Error：Error in username or password！\");",
									"});",
									"",
									"pm.test(\"Verify responseBody\", function()",
									"{",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "c790f806-7eb2-452e-b5b9-0d20168538fe",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "venuschanTEST",
									"type": "text"
								},
								{
									"key": "password",
									"value": "frankyda1111",
									"type": "text"
								},
								{
									"key": "browserId",
									"value": "123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "User can not log in with invalid password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebe7ee6e-d3b0-42cf-bdfb-978ba873853b",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"error\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        0",
									"      ]",
									"    },",
									"    \"error\": {",
									"      \"$id\": \"#/properties/error\",",
									"      \"type\": \"boolean\",",
									"      \"title\": \"The Error Schema\",",
									"      \"default\": false,",
									"      \"examples\": [",
									"        true",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Error：Error in username or password！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//1.0 Assertion tests",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"error is true\", function ()",
									"{",
									"    pm.expect(jsonData.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify response message for invalid username\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Error：Error in username or password！\");",
									"});",
									"",
									"pm.test(\"Verify responseBody against json schema\", function()",
									"{",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "Venuschan!1",
									"type": "text"
								},
								{
									"key": "password",
									"value": "frankyda1111TEST",
									"type": "text"
								},
								{
									"key": "browserId",
									"value": "123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "User can not log in with invalid password and username",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "ebe7ee6e-d3b0-42cf-bdfb-978ba873853b",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"error\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        0",
									"      ]",
									"    },",
									"    \"error\": {",
									"      \"$id\": \"#/properties/error\",",
									"      \"type\": \"boolean\",",
									"      \"title\": \"The Error Schema\",",
									"      \"default\": false,",
									"      \"examples\": [",
									"        true",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Error：Error in username or password！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//1.0 Assertion tests",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"error is true\", function ()",
									"{",
									"    pm.expect(jsonData.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify response message for invalid username\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Error：Error in username or password！\");",
									"});",
									"",
									"pm.test(\"Verify responseBody against json schema\", function(){",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true;  ",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "Venuschan!1TEST",
									"type": "text"
								},
								{
									"key": "password",
									"value": "frankyda1111TEST",
									"type": "text"
								},
								{
									"key": "browserId",
									"value": "123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "TEARDOWN should delete the account with valid account number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f723202f-37ca-4286-ba39-af30b6089b68",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"null\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"default\": null,",
									"      \"examples\": [",
									"        null",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//Assertion tests",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify the response msg\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/delete?account_number={{accountNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"delete"
							],
							"query": [
								{
									"key": "account_number",
									"value": "{{accountNumber}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "5 - User can not delete an account with invalid account number",
			"item": [
				{
					"name": "should register an account with valid username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b32d81e-c1a6-4193-8c3f-32135e75c642",
								"exec": [
									"//0: Variables",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10161\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//0.1: Environment Variable",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"accountNumber\", jsonData.datas.accountNumber);",
									"",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"//Check if \"Success! \" msg is sent as response",
									"",
									"pm.test(\"Verify the registration success or not and to see if account number returned\", function ()",
									"{",
									"   pm.expect(jsonData.message).eql(\"Success！\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d451272-34ff-4f31-9f2b-2e08ba31a844",
								"exec": [
									"//username and password",
									"pm.globals.set(\"username\", (\"random\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));",
									"",
									"pm.globals.set(\"password\", (\"randomPassword\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "User cannot delete an account with invalid account number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f723202f-37ca-4286-ba39-af30b6089b68",
								"exec": [
									"//Variable",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"error\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        0",
									"      ]",
									"    },",
									"    \"error\": {",
									"      \"$id\": \"#/properties/error\",",
									"      \"type\": \"boolean\",",
									"      \"title\": \"The Error Schema\",",
									"      \"default\": false,",
									"      \"examples\": [",
									"        true",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Error：Unexpected！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"//Assertion tests",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify the response msg\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Error：Unexpected！\");",
									"});",
									"",
									"pm.test(\"Error is true\", function(){",
									"   pm.expect(jsonData.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verify responseBody against json schema\", function(){",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/delete?account_number=50",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"delete"
							],
							"query": [
								{
									"key": "account_number",
									"value": "50"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TEARDOWN should delete the account with valid account number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f723202f-37ca-4286-ba39-af30b6089b68",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"null\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"default\": null,",
									"      \"examples\": [",
									"        null",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//Assertion tests",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify the response msg\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/delete?account_number={{accountNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"delete"
							],
							"query": [
								{
									"key": "account_number",
									"value": "{{accountNumber}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "with account number",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "185729fa-9228-48ac-bd5a-e75281affe46",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "08f1b624-25b8-451e-9aa6-8e52e5f187b1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "6 - User cannot see the commodity list without logging in",
			"item": [
				{
					"name": "should register an account with valid username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b32d81e-c1a6-4193-8c3f-32135e75c642",
								"exec": [
									"//0: Variables",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10161\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//0.1: Environment Variable",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"accountNumber\", jsonData.datas.accountNumber);",
									"",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"//Check if \"Success! \" msg is sent as response",
									"",
									"pm.test(\"Verify the registration success or not and to see if account number returned\", function ()",
									"{",
									"   pm.expect(jsonData.message).eql(\"Success！\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d451272-34ff-4f31-9f2b-2e08ba31a844",
								"exec": [
									"//username and password",
									"pm.globals.set(\"username\", (\"random\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));",
									"",
									"pm.globals.set(\"password\", (\"randomPassword\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST account details to get token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4f13044-2e75-4e5d-9167-75509027f799",
								"exec": [
									"//Variable",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accessToken\",",
									"        \"tokenType\",",
									"        \"expiresIn\",",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accessToken\": {",
									"          \"$id\": \"#/properties/datas/properties/accessToken\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accesstoken Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"5kP587\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"tokenType\": {",
									"          \"$id\": \"#/properties/datas/properties/tokenType\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Tokentype Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"Bearer\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"expiresIn\": {",
									"          \"$id\": \"#/properties/datas/properties/expiresIn\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Expiresin Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            7200",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"{{accountNumber}}\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"//1.0 Assertion tests",
									"pm.test(\"Verify response status\", function(){",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify msg\", function(){",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									"",
									"pm.test(\"Verify responseBody against json schema\", function()",
									"{",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "browserId",
									"value": "123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET shopping cart items that we can buy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dfb3c735-98c3-4546-9739-8ee21b6e1895",
								"exec": [
									"//Variable",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"error\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        0",
									"      ]",
									"    },",
									"    \"error\": {",
									"      \"$id\": \"#/properties/error\",",
									"      \"type\": \"boolean\",",
									"      \"title\": \"The Error Schema\",",
									"      \"default\": false,",
									"      \"examples\": [",
									"        true",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Error：你还没有登录！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"//1.0 Assertion tests",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify message\", function (){",
									"    pm.expect(jsonData.message).to.eql(\"Error：你还没有登录！\"); ",
									"});",
									"",
									"pm.test(\"Verify error boolean\", function (){",
									"    pm.expect(jsonData.error).to.eql(true); ",
									"});",
									"",
									"pm.test(\"Verify responseBody against\", function (){",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "browserId",
								"value": "123",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/e-store/sales-data/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"sales-data",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "TEARDOWN should delete the account with valid account number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f723202f-37ca-4286-ba39-af30b6089b68",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"null\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"default\": null,",
									"      \"examples\": [",
									"        null",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//Assertion tests",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify the response msg\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/delete?account_number={{accountNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"delete"
							],
							"query": [
								{
									"key": "account_number",
									"value": "{{accountNumber}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "7 - User can log in with valid authentication",
			"item": [
				{
					"name": "should register an account with valid username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b32d81e-c1a6-4193-8c3f-32135e75c642",
								"exec": [
									"//0: Variables",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10161\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//0.1: Environment Variable",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"accountNumber\", jsonData.datas.accountNumber);",
									"",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"//Check if \"Success! \" msg is sent as response",
									"",
									"pm.test(\"Verify the registration success or not and to see if account number returned\", function ()",
									"{",
									"   pm.expect(jsonData.message).eql(\"Success！\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d451272-34ff-4f31-9f2b-2e08ba31a844",
								"exec": [
									"//username and password",
									"pm.globals.set(\"username\", (\"random\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));",
									"",
									"pm.globals.set(\"password\", (\"randomPassword\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST account details to get token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4f13044-2e75-4e5d-9167-75509027f799",
								"exec": [
									"//Variable",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accessToken\",",
									"        \"tokenType\",",
									"        \"expiresIn\",",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accessToken\": {",
									"          \"$id\": \"#/properties/datas/properties/accessToken\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accesstoken Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"CZJ6xh\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"tokenType\": {",
									"          \"$id\": \"#/properties/datas/properties/tokenType\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Tokentype Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"Bearer\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"expiresIn\": {",
									"          \"$id\": \"#/properties/datas/properties/expiresIn\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Expiresin Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            7200",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"{{accountNumber}}\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"var jsonData = pm.response.json();",
									"",
									"//1.0 Assertion tests",
									"pm.test(\"Verify response status\", function(){",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify msg\", function(){",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									"",
									"pm.test(\"Verify responseBody against json schema\", function()",
									"{",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "browserId",
									"value": "123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "TEARDOWN should delete the account with valid account number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f723202f-37ca-4286-ba39-af30b6089b68",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"null\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"default\": null,",
									"      \"examples\": [",
									"        null",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//Assertion tests",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify the response msg\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/delete?account_number={{accountNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"delete"
							],
							"query": [
								{
									"key": "account_number",
									"value": "{{accountNumber}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "8 - User can see the complete commodity list after logging in",
			"item": [
				{
					"name": "should register an account with valid username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b32d81e-c1a6-4193-8c3f-32135e75c642",
								"exec": [
									"//0: Variables",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10161\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//0.1: Environment Variable",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"accountNumber\", jsonData.datas.accountNumber);",
									"",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"//Check if \"Success! \" msg is sent as response",
									"",
									"pm.test(\"Verify the registration success or not and to see if account number returned\", function ()",
									"{",
									"   pm.expect(jsonData.message).eql(\"Success！\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d451272-34ff-4f31-9f2b-2e08ba31a844",
								"exec": [
									"//username and password",
									"pm.globals.set(\"username\", (\"random\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));",
									"",
									"pm.globals.set(\"password\", (\"randomPassword\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST account details to get token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4f13044-2e75-4e5d-9167-75509027f799",
								"exec": [
									"//0: Variable",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accessToken\",",
									"        \"tokenType\",",
									"        \"expiresIn\",",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accessToken\": {",
									"          \"$id\": \"#/properties/datas/properties/accessToken\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accesstoken Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"5kP587\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"tokenType\": {",
									"          \"$id\": \"#/properties/datas/properties/tokenType\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Tokentype Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"Bearer\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"expiresIn\": {",
									"          \"$id\": \"#/properties/datas/properties/expiresIn\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Expiresin Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            7200",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"{{accountNumber}}\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"//0.1: Set Environment Variable",
									"pm.globals.set(\"token\", jsonData.datas.accessToken);",
									"",
									"//1.0 Assertion tests",
									"pm.test(\"Verify response status\", function(){",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify msg\", function(){",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									"",
									"pm.test(\"Verify responseBody against json schema\", function()",
									"{",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "browserId",
									"value": "123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET shopping cart items that we can buy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dfb3c735-98c3-4546-9739-8ee21b6e1895",
								"exec": [
									"//0: Variable",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"array\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"items\": {",
									"        \"$id\": \"#/properties/datas/items\",",
									"        \"type\": \"object\",",
									"        \"title\": \"The Items Schema\",",
									"        \"required\": [",
									"          \"id\",",
									"          \"class\",",
									"          \"name\",",
									"          \"price\",",
									"          \"description\"",
									"        ],",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"$id\": \"#/properties/datas/items/properties/id\",",
									"            \"type\": \"integer\",",
									"            \"title\": \"The Id Schema\",",
									"            \"default\": 0,",
									"            \"examples\": [",
									"              1",
									"            ]",
									"          },",
									"          \"class\": {",
									"            \"$id\": \"#/properties/datas/items/properties/class\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Class Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"              \"Watch\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"          },",
									"          \"name\": {",
									"            \"$id\": \"#/properties/datas/items/properties/name\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Name Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"              \"Apple Watch Series 4\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"          },",
									"          \"price\": {",
									"            \"$id\": \"#/properties/datas/items/properties/price\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Price Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"              \"550.0\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"          },",
									"          \"description\": {",
									"            \"$id\": \"#/properties/datas/items/properties/description\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Description Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"              \"Apple Watch Series 4 - Space Gray, 44mm BRAND NEW\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"          }",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"",
									"//1.0 Assertion tests",
									"",
									"pm.test(\"Verify status is 200\", function (){",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify commodities class in responseBody (commodity list)\", function()",
									"{",
									"    //String array for prices",
									"    var classes = [\"Watch\", \"Earrings\", \"Dresses\", \"Wireless Receiver\", \"CLEANSER\"];",
									"    //for loop",
									"    for (var i = 0; i < classes.length; i++)",
									"    {",
									"        pm.expect(jsonData.datas[i].class).to.eql(classes[i]);",
									"    }",
									"});",
									"",
									"pm.test(\"Verify commodities name in responseBody (commodity list)\", function(){",
									"   pm.expect(jsonData.datas[0].name).to.eql(\"Apple Watch Series 4\");",
									"   pm.expect(jsonData.datas[1].name).to.eql(\"ELEGANT Earrings\");",
									"   pm.expect(jsonData.datas[2].name).to.eql(\"Girls Summer Dresses\");",
									"   pm.expect(jsonData.datas[3].name).to.eql(\"USB Wireless Receiver\");",
									"   pm.expect(jsonData.datas[4].name).to.eql(\"GREEN TEA CLEANSER\");",
									"});",
									"",
									"",
									"pm.test(\"Verify commodities price in responseBody (commodity list)\", function()",
									"{",
									"    //String array for prices",
									"    var prices = [\"550.0\", \"24.95\", \"22.50\", \"14.99\", \"27.90\"];",
									"    //for loop",
									"    for (var i = 0; i < prices.length; i++)",
									"    {",
									"        pm.expect(jsonData.datas[i].price).to.eql(prices[i]);",
									"    }",
									"});",
									"",
									"pm.test(\"Verify commodities description in responseBody (commodity list)\", function()",
									"{",
									"    //String array for prices",
									"    var descriptions = [\"Apple Watch Series 4 - Space Gray, 44mm BRAND NEW\", \"ELEGANT Earrings - Rose-Gold plated koru design drop earrings \\\"Aroha\\\"\", \"Girls Summer Dresses + Tops Bulk Lot Size 8\", \"600Mbps USB Wifi Adapter High Speed Mini WLAN Wireless Receiver Dongle\", \"PURE NATURAL SKINCARE GREEN TEA CLEANSER\"];",
									"    //for loop",
									"    for (var i = 0; i < descriptions.length; i++)",
									"    {",
									"        pm.expect(jsonData.datas[i].description).to.eql(descriptions[i]);",
									"    }",
									"});",
									"",
									"pm.test(\"Verify json structure against json schema\", function ()",
									"{",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "browserId",
								"value": "123",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/e-store/sales-data/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"sales-data",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "TEARDOWN should delete the account with valid account number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f723202f-37ca-4286-ba39-af30b6089b68",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"null\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"default\": null,",
									"      \"examples\": [",
									"        null",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//Assertion tests",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify the response msg\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/delete?account_number={{accountNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"delete"
							],
							"query": [
								{
									"key": "account_number",
									"value": "{{accountNumber}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "9 - User can create shopping cart after logging in",
			"item": [
				{
					"name": "should register an account with valid username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b32d81e-c1a6-4193-8c3f-32135e75c642",
								"exec": [
									"//0: Variables",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10161\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//0.1: Environment Variable",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"accountNumber\", jsonData.datas.accountNumber);",
									"",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"//Check if \"Success! \" msg is sent as response",
									"",
									"pm.test(\"Verify the registration success or not and to see if account number returned\", function ()",
									"{",
									"   pm.expect(jsonData.message).eql(\"Success！\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d451272-34ff-4f31-9f2b-2e08ba31a844",
								"exec": [
									"//username and password",
									"pm.globals.set(\"username\", (\"random\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));",
									"",
									"pm.globals.set(\"password\", (\"randomPassword\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST account details to get token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4f13044-2e75-4e5d-9167-75509027f799",
								"exec": [
									"//0: Variable",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accessToken\",",
									"        \"tokenType\",",
									"        \"expiresIn\",",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accessToken\": {",
									"          \"$id\": \"#/properties/datas/properties/accessToken\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accesstoken Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"5kP587\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"tokenType\": {",
									"          \"$id\": \"#/properties/datas/properties/tokenType\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Tokentype Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"Bearer\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"expiresIn\": {",
									"          \"$id\": \"#/properties/datas/properties/expiresIn\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Expiresin Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            7200",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"{{accountNumber}}\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"//0.1: Set Environment Variable",
									"pm.globals.set(\"token\", jsonData.datas.accessToken);",
									"",
									"//1.0 Assertion tests",
									"pm.test(\"Verify response status\", function(){",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify msg\", function(){",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									"",
									"pm.test(\"Verify responseBody against json schema\", function()",
									"{",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "browserId",
									"value": "123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a shopping cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "008bc1a2-a1b6-4c3a-a5e0-ffaae88fdeac",
								"exec": [
									"//0: Variable",
									"",
									"",
									"//0.1: Local Variables",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"cartId\",",
									"        \"accountNumber\",",
									"        \"amountDue\"",
									"      ],",
									"      \"properties\": {",
									"        \"cartId\": {",
									"          \"$id\": \"#/properties/datas/properties/cartId\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Cartid Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            447",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10179\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"amountDue\": {",
									"          \"$id\": \"#/properties/datas/properties/amountDue\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Amountdue Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            0",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"",
									"",
									"//0.2 Set Environment Variable",
									"pm.globals.set(\"cartId\", jsonData.datas.cartId);",
									"",
									"//1: Assertion Function",
									"pm.test(\"Verify response status is 200\", function (){",
									"  pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify response msg is success\", function (){",
									"  pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									"",
									"pm.test(\"Verigy responseBody against json schema\", function (){",
									"  pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "browserId",
								"value": "111",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "accountNumber",
									"value": "{{accountNumber}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "user can delete shopping cart we have just added",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c62cef3b-7b6f-4c08-87e7-6781d67259b8",
								"exec": [
									"//0: Variable",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"cartId\",",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"cartId\": {",
									"          \"$id\": \"#/properties/datas/properties/cartId\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Cartid Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"427\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10178\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"//0.1: Environment Variables",
									"//Assertion tests",
									"pm.test(\"Verify response status is 200\", function()",
									"{",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify response body againse json schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify response body data\", function (){",
									"   pm.expect(jsonData.code).to.eql(200);",
									"   ",
									"   var acNum = pm.globals.get(\"accountNumber\");",
									"   pm.expect(jsonData.datas.accountNumber).to.eql(acNum);",
									"  ",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "browserId",
								"value": "123",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/delete?cartId={{cartId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"delete"
							],
							"query": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TEARDOWN should delete the account with valid account number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f723202f-37ca-4286-ba39-af30b6089b68",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"null\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"default\": null,",
									"      \"examples\": [",
									"        null",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//Assertion tests",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify the response msg\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/delete?account_number={{accountNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"delete"
							],
							"query": [
								{
									"key": "account_number",
									"value": "{{accountNumber}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "10 - User cannot create shopping cart without valid authentication",
			"item": [
				{
					"name": "should register an account with valid username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b32d81e-c1a6-4193-8c3f-32135e75c642",
								"exec": [
									"//0: Variables",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10161\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//0.1: Environment Variable",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"accountNumber\", jsonData.datas.accountNumber);",
									"",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"//Check if \"Success! \" msg is sent as response",
									"",
									"pm.test(\"Verify the registration success or not and to see if account number returned\", function ()",
									"{",
									"   pm.expect(jsonData.message).eql(\"Success！\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d451272-34ff-4f31-9f2b-2e08ba31a844",
								"exec": [
									"//username and password",
									"pm.globals.set(\"username\", (\"random\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));",
									"",
									"pm.globals.set(\"password\", (\"randomPassword\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST account details to get token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4f13044-2e75-4e5d-9167-75509027f799",
								"exec": [
									"//0: Variable",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accessToken\",",
									"        \"tokenType\",",
									"        \"expiresIn\",",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accessToken\": {",
									"          \"$id\": \"#/properties/datas/properties/accessToken\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accesstoken Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"5kP587\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"tokenType\": {",
									"          \"$id\": \"#/properties/datas/properties/tokenType\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Tokentype Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"Bearer\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"expiresIn\": {",
									"          \"$id\": \"#/properties/datas/properties/expiresIn\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Expiresin Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            7200",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"{{accountNumber}}\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"//0.1: Set Environment Variable",
									"pm.globals.set(\"token\", jsonData.datas.accessToken);",
									"",
									"//1.0 Assertion tests",
									"pm.test(\"Verify response status\", function(){",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify msg\", function(){",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									"",
									"pm.test(\"Verify responseBody against json schema\", function()",
									"{",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "browserId",
									"value": "123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "user can not create shopping cart with invalid account number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "0b449101-2524-4ac6-b585-694967846ab2",
								"exec": [
									"//0: Variable",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"error\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        0",
									"      ]",
									"    },",
									"    \"error\": {",
									"      \"$id\": \"#/properties/error\",",
									"      \"type\": \"boolean\",",
									"      \"title\": \"The Error Schema\",",
									"      \"default\": false,",
									"      \"examples\": [",
									"        true",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Error：Unknown accountNumber！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"//1: Assertion Function",
									"",
									"pm.test(\"Verify response status is 200\", function (){",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify responseBody data\", function (){",
									"   pm.expect(jsonData.message).to.eql(\"Error：Unknown accountNumber！\");",
									"   pm.expect(jsonData.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verigy responseBody against json schema\", function (){",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "browserId",
								"value": "111",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "accountNumber",
									"value": "sdasgagas",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "user can not create shopping cart with invalid token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "55a7424a-e3df-46f0-8fbf-16f95192678d",
								"exec": [
									"//0: Variable",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"error\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        0",
									"      ]",
									"    },",
									"    \"error\": {",
									"      \"$id\": \"#/properties/error\",",
									"      \"type\": \"boolean\",",
									"      \"title\": \"The Error Schema\",",
									"      \"default\": false,",
									"      \"examples\": [",
									"        true",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Error：你还没有登录！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"//1: Assertion Function",
									"",
									"pm.test(\"Verify response status is 200\", function (){",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify responseBody data\", function (){",
									"   pm.expect(jsonData.message).to.eql(\"Error：你还没有登录！\");",
									"   pm.expect(jsonData.error).to.eql(true);",
									"});",
									"",
									"pm.test(\"Verigy responseBody against json schema\", function (){",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "qegwrhserth",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "browserId",
								"value": "111",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "accountNumber",
									"value": "{{accountNumber}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "TEARDOWN should delete the account with valid account number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f723202f-37ca-4286-ba39-af30b6089b68",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"null\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"default\": null,",
									"      \"examples\": [",
									"        null",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//Assertion tests",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify the response msg\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/delete?account_number={{accountNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"delete"
							],
							"query": [
								{
									"key": "account_number",
									"value": "{{accountNumber}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"description": "Authentication:\n\n- valid token\n- valid account number",
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "d1b9941b-e6df-45e2-842c-4b5c63b6ee01",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "226ab05e-9927-475a-8463-5d9fde5055c3",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "11 - User can not create more than one shopping cart",
			"item": [
				{
					"name": "should register an account with valid username and password",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "8b32d81e-c1a6-4193-8c3f-32135e75c642",
								"exec": [
									"//0: Variables",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10161\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//0.1: Environment Variable",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"accountNumber\", jsonData.datas.accountNumber);",
									"",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"//Check if \"Success! \" msg is sent as response",
									"",
									"pm.test(\"Verify the registration success or not and to see if account number returned\", function ()",
									"{",
									"   pm.expect(jsonData.message).eql(\"Success！\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "3d451272-34ff-4f31-9f2b-2e08ba31a844",
								"exec": [
									"//username and password",
									"pm.globals.set(\"username\", (\"random\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));",
									"",
									"pm.globals.set(\"password\", (\"randomPassword\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST account details to get token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4f13044-2e75-4e5d-9167-75509027f799",
								"exec": [
									"//0: Variable",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accessToken\",",
									"        \"tokenType\",",
									"        \"expiresIn\",",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accessToken\": {",
									"          \"$id\": \"#/properties/datas/properties/accessToken\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accesstoken Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"5kP587\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"tokenType\": {",
									"          \"$id\": \"#/properties/datas/properties/tokenType\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Tokentype Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"Bearer\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"expiresIn\": {",
									"          \"$id\": \"#/properties/datas/properties/expiresIn\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Expiresin Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            7200",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"{{accountNumber}}\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"//0.1: Set Environment Variable",
									"pm.globals.set(\"token\", jsonData.datas.accessToken);",
									"",
									"//1.0 Assertion tests",
									"pm.test(\"Verify response status\", function(){",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify msg\", function(){",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									"",
									"pm.test(\"Verify responseBody against json schema\", function()",
									"{",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "browserId",
									"value": "123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a shopping cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96bdd318-61a1-4293-a533-711000304068",
								"exec": [
									"//0: Variable",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"cartId\",",
									"        \"accountNumber\",",
									"        \"amountDue\"",
									"      ],",
									"      \"properties\": {",
									"        \"cartId\": {",
									"          \"$id\": \"#/properties/datas/properties/cartId\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Cartid Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            401",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10175\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"amountDue\": {",
									"          \"$id\": \"#/properties/datas/properties/amountDue\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Amountdue Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            0",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//0.1: Environment Variable",
									"pm.globals.set(\"cartId\", jsonData.datas.cartId);",
									"",
									"//1: Assertion Functions",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify responseBody data\", function ()",
									"{",
									"   ",
									"   //pm.expect(jsonData.datas.accountNumber).to.eql(\"{{accountNumber}}\");",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									"",
									"pm.test(\"Verify response body against json schema\", function (){",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "browserId",
								"type": "text",
								"value": "111"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "accountNumber",
									"value": "{{accountNumber}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a shopping cart again while user already has one",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96bdd318-61a1-4293-a533-711000304068",
								"exec": [
									"//0: Variable",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"error\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        0",
									"      ]",
									"    },",
									"    \"error\": {",
									"      \"$id\": \"#/properties/error\",",
									"      \"type\": \"boolean\",",
									"      \"title\": \"The Error Schema\",",
									"      \"default\": false,",
									"      \"examples\": [",
									"        true",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Error：Repeated operations！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//0.1: Environment Variable",
									"",
									"//1: Assertion Functions",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify responseBody data\", function ()",
									"{",
									"   pm.expect(jsonData.error).to.eql(true);",
									"   pm.expect(jsonData.message).to.eql(\"Error：Repeated operations！\");",
									"});",
									"",
									"pm.test(\"Verify response body against json schema\", function (){",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "browserId",
								"type": "text",
								"value": "111"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "accountNumber",
									"value": "{{accountNumber}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "TEARDOWN delete shopping cart we have just added",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c62cef3b-7b6f-4c08-87e7-6781d67259b8",
								"exec": [
									"//0: Variable",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"cartId\",",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"cartId\": {",
									"          \"$id\": \"#/properties/datas/properties/cartId\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Cartid Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"427\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10178\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"//0.1: Environment Variables",
									"",
									"",
									"//Assertion tests",
									"pm.test(\"Verify response status is 200\", function()",
									"{",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify response body againse json schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify response body data\", function (){",
									"   pm.expect(jsonData.code).to.eql(200);",
									"   ",
									"   var ac = pm.globals.get(\"accountNumber\");",
									"   pm.expect(jsonData.datas.accountNumber).to.eql(ac);",
									"  ",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "browserId",
								"value": "123",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/delete?cartId={{cartId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"delete"
							],
							"query": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TEARDOWN should delete the account with valid account number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f723202f-37ca-4286-ba39-af30b6089b68",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"null\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"default\": null,",
									"      \"examples\": [",
									"        null",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//Assertion tests",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify the response msg\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/delete?account_number={{accountNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"delete"
							],
							"query": [
								{
									"key": "account_number",
									"value": "{{accountNumber}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "12 - User can add/delete items in their shopping cart and inspect the related information",
			"item": [
				{
					"name": "should register an account with valid username and password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "83b70c36-90b2-43cd-be39-274b479772e0",
								"exec": [
									"//username and password",
									"pm.globals.set(\"username\", (\"random\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));",
									"",
									"pm.globals.set(\"password\", (\"randomPassword\" + (Math.random() * Math.pow(10, 5)).toString()).slice(0, 20));",
									"",
									"//Clean up test environment",
									"pm.globals.set(\"watch_in_cart\", 0);",
									"pm.globals.set(\"earrings_in_cart\", 0);",
									"pm.globals.set(\"dress_in_cart\", 0);",
									"pm.globals.set(\"receiver_in_cart\", 0);",
									"pm.globals.set(\"cleanser_in_cart\", 0);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "0ff68059-370f-4e9a-8b76-cef70b5831d3",
								"exec": [
									"//0: Variables",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10161\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//0.1: Environment Variable",
									"",
									"var jsonData = JSON.parse(responseBody);",
									"pm.globals.set(\"accountNumber\", jsonData.datas.accountNumber);",
									"",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"//Check if \"Success! \" msg is sent as response",
									"",
									"pm.test(\"Verify the registration success or not and to see if account number returned\", function ()",
									"{",
									"   pm.expect(jsonData.message).eql(\"Success！\");",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							],
							"options": {
								"raw": {
									"language": "text"
								}
							}
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST account details to get token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "b4f13044-2e75-4e5d-9167-75509027f799",
								"exec": [
									"//0: Variable",
									"",
									"//0.1: Loval Variables",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accessToken\",",
									"        \"tokenType\",",
									"        \"expiresIn\",",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accessToken\": {",
									"          \"$id\": \"#/properties/datas/properties/accessToken\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accesstoken Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"5kP587\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"tokenType\": {",
									"          \"$id\": \"#/properties/datas/properties/tokenType\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Tokentype Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"Bearer\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"expiresIn\": {",
									"          \"$id\": \"#/properties/datas/properties/expiresIn\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Expiresin Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            7200",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"{{accountNumber}}\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var accountNumber = pm.globals.get(\"accountNumber\");",
									"",
									"//0.2: Set Environment Variable",
									"pm.globals.set(\"token\", jsonData.datas.accessToken);",
									"",
									"",
									"",
									"//1.0 Assertion tests",
									"pm.test(\"Verify response status\", function(){",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify msg\", function(){",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									"",
									"pm.test(\"Verify responseBody against json schema\", function()",
									"{",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});",
									"",
									"pm.test(\"Verify account number\", function(){",
									"   pm.expect(jsonData.datas.accountNumber).to.eql(accountNumber);",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "browserId",
									"value": "123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a shopping cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "96bdd318-61a1-4293-a533-711000304068",
								"exec": [
									"//0: Variable",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"cartId\",",
									"        \"accountNumber\",",
									"        \"amountDue\"",
									"      ],",
									"      \"properties\": {",
									"        \"cartId\": {",
									"          \"$id\": \"#/properties/datas/properties/cartId\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Cartid Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            401",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10175\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"amountDue\": {",
									"          \"$id\": \"#/properties/datas/properties/amountDue\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Amountdue Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            0",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//0.1: Environment Variable",
									"pm.globals.set(\"cartId\", jsonData.datas.cartId);",
									"",
									"//1: Assertion Functions",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify responseBody data\", function ()",
									"{",
									"   ",
									"   //pm.expect(jsonData.datas.accountNumber).to.eql(\"{{accountNumber}}\");",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									"",
									"pm.test(\"Verify response body against json schema\", function (){",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});",
									"",
									"pm.test(\"Verify account due is 0\", function(){",
									"   pm.expect(jsonData.datas.amountDue).to.eql(0); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "browserId",
								"type": "text",
								"value": "111"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "accountNumber",
									"value": "{{accountNumber}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "GET shopping cart items that we can buy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "dfb3c735-98c3-4546-9739-8ee21b6e1895",
								"exec": [
									"//0: Variable",
									"var jsonData = pm.response.json();",
									"",
									"var itemList = jsonData.datas;",
									"",
									"",
									"",
									"//0.1: Set Environment Variable",
									"// var prices = [\"550.0\", \"24.95\", \"22.50\", \"14.99\", \"27.90\"];",
									"// pm.environment.set(\"priceArray\", JSON.stringify(prices));",
									"",
									"",
									"//0.2: Set Global Variable",
									"",
									"//1.0 Assertion tests",
									"",
									"pm.test(\"Verify status is 200\", function (){",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify commodities class in responseBody (commodity list)\", function()",
									"{",
									"    // //String array for prices",
									"    // var classes = [\"Watch\", \"Earrings\", \"Dresses\", \"Wireless Receiver\", \"CLEANSER\"];",
									"    // //for loop",
									"    // for (var i = 0; i < classes.length; i++)",
									"    // {",
									"    //     pm.expect(jsonData.datas[i].class).to.eql(classes[i]);",
									"    // }",
									"    var expected_items = [",
									"    {",
									"      \"id\": 1,",
									"      \"class\": \"Watch\",",
									"      \"name\": \"Apple Watch Series 4\",",
									"      \"price\": \"550.0\",",
									"      \"description\": \"Apple Watch Series 4 - Space Gray, 44mm BRAND NEW\"",
									"    },",
									"    {",
									"      \"id\": 2,",
									"      \"class\": \"Earrings\",",
									"      \"name\": \"ELEGANT Earrings\",",
									"      \"price\": \"24.95\",",
									"      \"description\": \"ELEGANT Earrings - Rose-Gold plated koru design drop earrings \\\"Aroha\\\"\"",
									"    },",
									"    {",
									"      \"id\": 3,",
									"      \"class\": \"Dresses\",",
									"      \"name\": \"Girls Summer Dresses\",",
									"      \"price\": \"22.50\",",
									"      \"description\": \"Girls Summer Dresses + Tops Bulk Lot Size 8\"",
									"    },",
									"    {",
									"      \"id\": 4,",
									"      \"class\": \"Wireless Receiver\",",
									"      \"name\": \"USB Wireless Receiver\",",
									"      \"price\": \"14.99\",",
									"      \"description\": \"600Mbps USB Wifi Adapter High Speed Mini WLAN Wireless Receiver Dongle\"",
									"    },",
									"    {",
									"      \"id\": 5,",
									"      \"class\": \"CLEANSER\",",
									"      \"name\": \"GREEN TEA CLEANSER\",",
									"      \"price\": \"27.90\",",
									"      \"description\": \"PURE NATURAL SKINCARE GREEN TEA CLEANSER\"",
									"    }",
									"  ]",
									"    ",
									"    pm.expect(itemList).to.eql(expected_items)",
									"});",
									"",
									"// pm.test(\"Verify commodities name in responseBody (commodity list)\", function(){",
									"//   pm.expect(jsonData.datas[0].name).to.eql(\"Apple Watch Series 4\");",
									"//   pm.expect(jsonData.datas[1].name).to.eql(\"ELEGANT Earrings\");",
									"//   pm.expect(jsonData.datas[2].name).to.eql(\"Girls Summer Dresses\");",
									"//   pm.expect(jsonData.datas[3].name).to.eql(\"USB Wireless Receiver\");",
									"//   pm.expect(jsonData.datas[4].name).to.eql(\"GREEN TEA CLEANSER\");",
									"// });",
									"",
									"",
									"// pm.test(\"Verify commodities price in responseBody (commodity list)\", function()",
									"// {",
									"//     //for loop",
									"//     for (var i = 0; i < prices.length; i++)",
									"//     {",
									"//         pm.expect(jsonData.datas[i].price).to.eql(prices[i]);",
									"//     }",
									"// });",
									"",
									"// pm.test(\"Verify commodities description in responseBody (commodity list)\", function()",
									"// {",
									"//     //String array for prices",
									"//     var descriptions = [\"Apple Watch Series 4 - Space Gray, 44mm BRAND NEW\", \"ELEGANT Earrings - Rose-Gold plated koru design drop earrings \\\"Aroha\\\"\", \"Girls Summer Dresses + Tops Bulk Lot Size 8\", \"600Mbps USB Wifi Adapter High Speed Mini WLAN Wireless Receiver Dongle\", \"PURE NATURAL SKINCARE GREEN TEA CLEANSER\"];",
									"//     //for loop",
									"//     for (var i = 0; i < descriptions.length; i++)",
									"//     {",
									"//         pm.expect(jsonData.datas[i].description).to.eql(descriptions[i]);",
									"//     }",
									"// });"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"id": "8abceb0b-f592-4326-90de-36f2476c6a25",
								"exec": [
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "browserId",
								"value": "123",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/e-store/sales-data/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"sales-data",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add dresses into the shopping cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dd2b9226-1bc7-45a9-9c1a-f11f94836cd9",
								"exec": [
									"//1.0: Set api request data",
									"pm.globals.set(\"itemId\", 3);",
									"",
									"pm.globals.set(\"quantity_of_a_item\", 5);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cfd505bc-5e02-4eb4-861f-201462976b1d",
								"exec": [
									"//1.0 Variables",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"cartId\",",
									"        \"accountNumber\",",
									"        \"amountDue\"",
									"      ],",
									"      \"properties\": {",
									"        \"cartId\": {",
									"          \"$id\": \"#/properties/datas/properties/cartId\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Cartid Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            518",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10187\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"amountDue\": {",
									"          \"$id\": \"#/properties/datas/properties/amountDue\",",
									"          \"type\": \"number\",",
									"          \"title\": \"The Amountdue Schema\",",
									"          \"default\": 0.0,",
									"          \"examples\": [",
									"            112.5",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"",
									"//New = Old + New;",
									"pm.globals.set(\"dress_in_cart\", pm.globals.get(\"dress_in_cart\") + pm.globals.get(\"quantity_of_a_item\"));",
									"",
									"",
									"//2.0 Tests",
									"pm.test(\"Verify amount due\", function()",
									"{",
									"    var watch_amount_due = parseFloat(pm.globals.get(\"watch_in_cart\")) * parseFloat(pm.globals.get(\"watch_price\"));",
									"    var earrings_amount_due = parseFloat(pm.globals.get(\"earrings_in_cart\")) * parseFloat(pm.globals.get(\"earrings_price\"));",
									"    var dress_amount_due = parseFloat(pm.globals.get(\"dress_in_cart\")) * parseFloat(pm.globals.get(\"dress_price\"));",
									"    var receiver_amount_due = parseFloat(pm.globals.get(\"receiver_in_cart\")) * parseFloat(pm.globals.get(\"receiver_price\"));",
									"    var cleanser_amount_due = parseFloat(pm.globals.get(\"cleanser_in_cart\")) * parseFloat(pm.globals.get(\"cleanser_price\"));",
									"     ",
									"    pm.expect(jsonData.datas.amountDue).to.eql(watch_amount_due + earrings_amount_due + dress_amount_due + receiver_amount_due + cleanser_amount_due);",
									"});  ",
									"",
									"pm.test(\"Verify response body\", function (){",
									"    pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.datas.cartId).to.eql(pm.globals.get(\"cartId\"));",
									"    pm.expect(jsonData.datas.accountNumber).to.eql(pm.globals.get(\"accountNumber\"));",
									"    pm.expect(jsonData.message).to.eql(\"Success！\");",
									"    ",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"    ",
									"",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "browserId",
								"value": "123",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "cartId",
									"value": "{{cartId}} ",
									"type": "text"
								},
								{
									"key": "itemId",
									"value": "{{itemId}}",
									"type": "text"
								},
								{
									"key": "quantity",
									"value": "{{quantity_of_a_item}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/addItem",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"addItem"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add watch into the shopping cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dd2b9226-1bc7-45a9-9c1a-f11f94836cd9",
								"exec": [
									"//1.0: Set api request data",
									"pm.globals.set(\"itemId\", 1);",
									"",
									"pm.globals.set(\"quantity_of_a_item\", 2);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cfd505bc-5e02-4eb4-861f-201462976b1d",
								"exec": [
									"//1.0 Variables",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"cartId\",",
									"        \"accountNumber\",",
									"        \"amountDue\"",
									"      ],",
									"      \"properties\": {",
									"        \"cartId\": {",
									"          \"$id\": \"#/properties/datas/properties/cartId\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Cartid Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            523",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10187\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"amountDue\": {",
									"          \"$id\": \"#/properties/datas/properties/amountDue\",",
									"          \"type\": \"number\",",
									"          \"title\": \"The Amountdue Schema\",",
									"          \"default\": 0.0,",
									"          \"examples\": [",
									"            1212.5",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//New = Old + New;",
									"pm.globals.set(\"watch_in_cart\", pm.globals.get(\"watch_in_cart\") + pm.globals.get(\"quantity_of_a_item\"));",
									"",
									"",
									"//2.0 Tests",
									"pm.test(\"Verify amount due\", function()",
									"{",
									"    var watch_amount_due = parseFloat(pm.globals.get(\"watch_in_cart\")) * parseFloat(pm.globals.get(\"watch_price\"));",
									"    var earrings_amount_due = parseFloat(pm.globals.get(\"earrings_in_cart\")) * parseFloat(pm.globals.get(\"earrings_price\"));",
									"    var dress_amount_due = parseFloat(pm.globals.get(\"dress_in_cart\")) * parseFloat(pm.globals.get(\"dress_price\"));",
									"    var receiver_amount_due = parseFloat(pm.globals.get(\"receiver_in_cart\")) * parseFloat(pm.globals.get(\"receiver_price\"));",
									"    var cleanser_amount_due = parseFloat(pm.globals.get(\"cleanser_in_cart\")) * parseFloat(pm.globals.get(\"cleanser_price\"));",
									"     ",
									"    pm.expect(jsonData.datas.amountDue).to.eql(watch_amount_due + earrings_amount_due + dress_amount_due + receiver_amount_due + cleanser_amount_due);",
									"});  ",
									"",
									"pm.test(\"Verify response body\", function (){",
									"    pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.datas.cartId).to.eql(pm.globals.get(\"cartId\"));",
									"    pm.expect(jsonData.datas.accountNumber).to.eql(pm.globals.get(\"accountNumber\"));",
									"    pm.expect(jsonData.message).to.eql(\"Success！\");",
									"    ",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"    ",
									"",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "browserId",
								"type": "text",
								"value": "123"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "cartId",
									"value": "{{cartId}} ",
									"type": "text"
								},
								{
									"key": "itemId",
									"value": "{{itemId}}",
									"type": "text"
								},
								{
									"key": "quantity",
									"value": "{{quantity_of_a_item}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/addItem",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"addItem"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add dresses into the shopping cart Copy",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "dd2b9226-1bc7-45a9-9c1a-f11f94836cd9",
								"exec": [
									"//1.0: Set api request data",
									"pm.globals.set(\"itemId\", 3);",
									"",
									"pm.globals.set(\"quantity_of_a_item\", 3);",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "cfd505bc-5e02-4eb4-861f-201462976b1d",
								"exec": [
									"//1.0 Variables",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"cartId\",",
									"        \"accountNumber\",",
									"        \"amountDue\"",
									"      ],",
									"      \"properties\": {",
									"        \"cartId\": {",
									"          \"$id\": \"#/properties/datas/properties/cartId\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Cartid Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            518",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10187\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"amountDue\": {",
									"          \"$id\": \"#/properties/datas/properties/amountDue\",",
									"          \"type\": \"number\",",
									"          \"title\": \"The Amountdue Schema\",",
									"          \"default\": 0.0,",
									"          \"examples\": [",
									"            112.5",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"",
									"//New = Old + New;",
									"pm.globals.set(\"dress_in_cart\", pm.globals.get(\"dress_in_cart\") + pm.globals.get(\"quantity_of_a_item\"));",
									"",
									"",
									"//2.0 Tests",
									"pm.test(\"Verify amount due\", function()",
									"{",
									"    var watch_amount_due = parseFloat(pm.globals.get(\"watch_in_cart\")) * parseFloat(pm.globals.get(\"watch_price\"));",
									"    var earrings_amount_due = parseFloat(pm.globals.get(\"earrings_in_cart\")) * parseFloat(pm.globals.get(\"earrings_price\"));",
									"    var dress_amount_due = parseFloat(pm.globals.get(\"dress_in_cart\")) * parseFloat(pm.globals.get(\"dress_price\"));",
									"    var receiver_amount_due = parseFloat(pm.globals.get(\"receiver_in_cart\")) * parseFloat(pm.globals.get(\"receiver_price\"));",
									"    var cleanser_amount_due = parseFloat(pm.globals.get(\"cleanser_in_cart\")) * parseFloat(pm.globals.get(\"cleanser_price\"));",
									"     ",
									"    pm.expect(jsonData.datas.amountDue).to.eql(watch_amount_due + earrings_amount_due + dress_amount_due + receiver_amount_due + cleanser_amount_due);",
									"});  ",
									"",
									"pm.test(\"Verify response body\", function (){",
									"    pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.datas.cartId).to.eql(pm.globals.get(\"cartId\"));",
									"    pm.expect(jsonData.datas.accountNumber).to.eql(pm.globals.get(\"accountNumber\"));",
									"    pm.expect(jsonData.message).to.eql(\"Success！\");",
									"    ",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"    ",
									"",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "browserId",
								"value": "123",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "cartId",
									"value": "{{cartId}} ",
									"type": "text"
								},
								{
									"key": "itemId",
									"value": "{{itemId}}",
									"type": "text"
								},
								{
									"key": "quantity",
									"value": "{{quantity_of_a_item}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/addItem",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"addItem"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all dresses from the shopping cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7fe996c1-c490-4ae9-a61f-898d05ab560d",
								"exec": [
									"//1: API request data",
									"pm.globals.set(\"itemId\", 3);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1abce27b-a607-4aa6-984a-1700339d3582",
								"exec": [
									"//1.0: Variables",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"cartId\",",
									"        \"accountNumber\",",
									"        \"amountDue\"",
									"      ],",
									"      \"properties\": {",
									"        \"cartId\": {",
									"          \"$id\": \"#/properties/datas/properties/cartId\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Cartid Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            524",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10187\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"amountDue\": {",
									"          \"$id\": \"#/properties/datas/properties/amountDue\",",
									"          \"type\": \"number\",",
									"          \"title\": \"The Amountdue Schema\",",
									"          \"default\": 0.0,",
									"          \"examples\": [",
									"            1347.5",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//1.1: Variables",
									"//set dresses quantity to 0",
									"pm.globals.set(\"dress_in_cart\", 0);",
									"",
									"//2.0 Tests",
									"pm.test(\"Verify amount due\", function()",
									"{",
									"    var watch_amount_due = parseFloat(pm.globals.get(\"watch_in_cart\")) * parseFloat(pm.globals.get(\"watch_price\"));",
									"    var earrings_amount_due = parseFloat(pm.globals.get(\"earrings_in_cart\")) * parseFloat(pm.globals.get(\"earrings_price\"));",
									"    var dress_amount_due = parseFloat(pm.globals.get(\"dress_in_cart\")) * parseFloat(pm.globals.get(\"dress_price\"));",
									"    var receiver_amount_due = parseFloat(pm.globals.get(\"receiver_in_cart\")) * parseFloat(pm.globals.get(\"receiver_price\"));",
									"    var cleanser_amount_due = parseFloat(pm.globals.get(\"cleanser_in_cart\")) * parseFloat(pm.globals.get(\"cleanser_price\"));",
									"     ",
									"    pm.expect(jsonData.datas.amountDue).to.eql(watch_amount_due + earrings_amount_due + dress_amount_due + receiver_amount_due + cleanser_amount_due);",
									"});  ",
									"",
									"pm.test(\"Verify response body\", function (){",
									"    pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.datas.cartId).to.eql(pm.globals.get(\"cartId\"));",
									"    pm.expect(jsonData.datas.accountNumber).to.eql(pm.globals.get(\"accountNumber\"));",
									"    pm.expect(jsonData.message).to.eql(\"Success！\");",
									"    ",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"    ",
									"",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "browserId",
								"type": "text",
								"value": "123aasd"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/deleteItem?cartId={{cartId}}&itemId={{itemId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"deleteItem"
							],
							"query": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{itemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete all watch from the shopping cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "7fe996c1-c490-4ae9-a61f-898d05ab560d",
								"exec": [
									"//1: API request data",
									"pm.globals.set(\"itemId\", 1);",
									"",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "1abce27b-a607-4aa6-984a-1700339d3582",
								"exec": [
									"//1.0: Variables",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"cartId\",",
									"        \"accountNumber\",",
									"        \"amountDue\"",
									"      ],",
									"      \"properties\": {",
									"        \"cartId\": {",
									"          \"$id\": \"#/properties/datas/properties/cartId\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Cartid Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            524",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10187\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"amountDue\": {",
									"          \"$id\": \"#/properties/datas/properties/amountDue\",",
									"          \"type\": \"number\",",
									"          \"title\": \"The Amountdue Schema\",",
									"          \"default\": 0.0,",
									"          \"examples\": [",
									"            1347.5",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//1.1: Variables",
									"//set dresses quantity to 0",
									"pm.globals.set(\"watch_in_cart\", 0);",
									"",
									"//2.0 Tests",
									"pm.test(\"Verify amount due\", function()",
									"{",
									"    var watch_amount_due = parseFloat(pm.globals.get(\"watch_in_cart\")) * parseFloat(pm.globals.get(\"watch_price\"));",
									"    var earrings_amount_due = parseFloat(pm.globals.get(\"earrings_in_cart\")) * parseFloat(pm.globals.get(\"earrings_price\"));",
									"    var dress_amount_due = parseFloat(pm.globals.get(\"dress_in_cart\")) * parseFloat(pm.globals.get(\"dress_price\"));",
									"    var receiver_amount_due = parseFloat(pm.globals.get(\"receiver_in_cart\")) * parseFloat(pm.globals.get(\"receiver_price\"));",
									"    var cleanser_amount_due = parseFloat(pm.globals.get(\"cleanser_in_cart\")) * parseFloat(pm.globals.get(\"cleanser_price\"));",
									"     ",
									"    pm.expect(jsonData.datas.amountDue).to.eql(watch_amount_due + earrings_amount_due + dress_amount_due + receiver_amount_due + cleanser_amount_due);",
									"});  ",
									"",
									"pm.test(\"Verify response body\", function (){",
									"    pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.datas.cartId).to.eql(pm.globals.get(\"cartId\"));",
									"    pm.expect(jsonData.datas.accountNumber).to.eql(pm.globals.get(\"accountNumber\"));",
									"    pm.expect(jsonData.message).to.eql(\"Success！\");",
									"    ",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"    ",
									"",
									"    ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "browserId",
								"type": "text",
								"value": "123aasd"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/deleteItem?cartId={{cartId}}&itemId={{itemId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"deleteItem"
							],
							"query": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{itemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TEARDOWN delete shopping cart we have just added",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c62cef3b-7b6f-4c08-87e7-6781d67259b8",
								"exec": [
									"//0: Variable",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"cartId\",",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"cartId\": {",
									"          \"$id\": \"#/properties/datas/properties/cartId\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Cartid Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"427\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10178\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"//0.1: Environment Variables",
									"",
									"",
									"//Assertion tests",
									"pm.test(\"Verify response status is 200\", function()",
									"{",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify response body againse json schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify response body data\", function (){",
									"   pm.expect(jsonData.code).to.eql(200);",
									"   ",
									"   var ac = pm.globals.get(\"accountNumber\");",
									"   pm.expect(jsonData.datas.accountNumber).to.eql(ac);",
									"  ",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "browserId",
								"value": "123",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/delete?cartId={{cartId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"delete"
							],
							"query": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TEARDOWN should delete the account with valid account number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f723202f-37ca-4286-ba39-af30b6089b68",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"null\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"default\": null,",
									"      \"examples\": [",
									"        null",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//Assertion tests",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify the response msg\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/delete?account_number={{accountNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"delete"
							],
							"query": [
								{
									"key": "account_number",
									"value": "{{accountNumber}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"event": [
				{
					"listen": "prerequest",
					"script": {
						"id": "70e19b86-0d4f-4c60-a4aa-9dbc8c83f4c4",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				},
				{
					"listen": "test",
					"script": {
						"id": "b719fcb3-cc5c-4906-9886-8dc523f820a1",
						"type": "text/javascript",
						"exec": [
							""
						]
					}
				}
			],
			"protocolProfileBehavior": {}
		},
		{
			"name": "13 - User can save new transaction",
			"item": [
				{
					"name": "should register an account with valid username and password",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "8dc07dcb-8ef3-4690-8f4a-6fe0804ca7cc",
								"exec": [
									"//API request data",
									"pm.globals.set(\"username\", (\"abc\" + (Math.random() + Math.pow(10, 5)).toString()).slice(0, 20));",
									"",
									"pm.globals.set(\"password\", (\"abc\" + (Math.random() + Math.pow(10, 5)).toString()).slice(0, 20));",
									"",
									"pm.globals.set(\"watch_in_cart\", 0);",
									"pm.globals.set(\"earrings_in_cart\", 0);",
									"pm.globals.set(\"dress_in_cart\", 0);",
									"pm.globals.set(\"receiver_in_cart\", 0);",
									"pm.globals.set(\"cleanser_in_cart\", 0);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "97a8e633-993f-4052-8fe8-d8791c1dc2f5",
								"exec": [
									"//1: Variables",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10188\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//1.1: Environment Variable",
									"pm.globals.set(\"accountNumber\", jsonData.datas.accountNumber);",
									"",
									"//2: Tests",
									"pm.test(\"Verify response data\", function()",
									"{",
									"    pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									"",
									"pm.test(\"Verify response status\", function()",
									"{",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify json structure with json schema\", function()",
									"{",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true; ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/register",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"register"
							]
						}
					},
					"response": []
				},
				{
					"name": "User can log in with valid authentication and get the token",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "989f14c5-c697-45c8-8d7f-10b9be2d4147",
								"exec": [
									"//1: Variables",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"accessToken\",",
									"        \"tokenType\",",
									"        \"expiresIn\",",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"accessToken\": {",
									"          \"$id\": \"#/properties/datas/properties/accessToken\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accesstoken Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"dcfscP\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"tokenType\": {",
									"          \"$id\": \"#/properties/datas/properties/tokenType\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Tokentype Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"Bearer\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"expiresIn\": {",
									"          \"$id\": \"#/properties/datas/properties/expiresIn\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Expiresin Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            7200",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10188\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//2: Set Environment Variables",
									"pm.globals.set(\"token\", jsonData.datas.accessToken);",
									"",
									"//2: Tests",
									"pm.test(\"Verify response data and its structure\", function()",
									"{",
									"    pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.datas.accountNumber).to.eql(pm.globals.get(\"accountNumber\"));",
									"    pm.expect(jsonData.message).to.eql(\"Success！\");",
									"    ",
									"    //json schema",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify response status is 200\", function(){",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "username",
									"value": "{{username}}",
									"type": "text"
								},
								{
									"key": "password",
									"value": "{{password}}",
									"type": "text"
								},
								{
									"key": "browserId",
									"value": "123",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/token",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"token"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get shopping cart items that we can buy",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "d0509216-a78c-487d-861d-12dccb40a1b9",
								"exec": [
									"//1: Variables",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"array\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"items\": {",
									"        \"$id\": \"#/properties/datas/items\",",
									"        \"type\": \"object\",",
									"        \"title\": \"The Items Schema\",",
									"        \"required\": [",
									"          \"id\",",
									"          \"class\",",
									"          \"name\",",
									"          \"price\",",
									"          \"description\"",
									"        ],",
									"        \"properties\": {",
									"          \"id\": {",
									"            \"$id\": \"#/properties/datas/items/properties/id\",",
									"            \"type\": \"integer\",",
									"            \"title\": \"The Id Schema\",",
									"            \"default\": 0,",
									"            \"examples\": [",
									"              1",
									"            ]",
									"          },",
									"          \"class\": {",
									"            \"$id\": \"#/properties/datas/items/properties/class\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Class Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"              \"Watch\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"          },",
									"          \"name\": {",
									"            \"$id\": \"#/properties/datas/items/properties/name\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Name Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"              \"Apple Watch Series 4\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"          },",
									"          \"price\": {",
									"            \"$id\": \"#/properties/datas/items/properties/price\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Price Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"              \"550.0\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"          },",
									"          \"description\": {",
									"            \"$id\": \"#/properties/datas/items/properties/description\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Description Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"              \"Apple Watch Series 4 - Space Gray, 44mm BRAND NEW\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"          }",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"var expected_datas = [",
									"    {",
									"      \"id\": 1,",
									"      \"class\": \"Watch\",",
									"      \"name\": \"Apple Watch Series 4\",",
									"      \"price\": \"550.0\",",
									"      \"description\": \"Apple Watch Series 4 - Space Gray, 44mm BRAND NEW\"",
									"    },",
									"    {",
									"      \"id\": 2,",
									"      \"class\": \"Earrings\",",
									"      \"name\": \"ELEGANT Earrings\",",
									"      \"price\": \"24.95\",",
									"      \"description\": \"ELEGANT Earrings - Rose-Gold plated koru design drop earrings \\\"Aroha\\\"\"",
									"    },",
									"    {",
									"      \"id\": 3,",
									"      \"class\": \"Dresses\",",
									"      \"name\": \"Girls Summer Dresses\",",
									"      \"price\": \"22.50\",",
									"      \"description\": \"Girls Summer Dresses + Tops Bulk Lot Size 8\"",
									"    },",
									"    {",
									"      \"id\": 4,",
									"      \"class\": \"Wireless Receiver\",",
									"      \"name\": \"USB Wireless Receiver\",",
									"      \"price\": \"14.99\",",
									"      \"description\": \"600Mbps USB Wifi Adapter High Speed Mini WLAN Wireless Receiver Dongle\"",
									"    },",
									"    {",
									"      \"id\": 5,",
									"      \"class\": \"CLEANSER\",",
									"      \"name\": \"GREEN TEA CLEANSER\",",
									"      \"price\": \"27.90\",",
									"      \"description\": \"PURE NATURAL SKINCARE GREEN TEA CLEANSER\"",
									"    }",
									"  ]",
									"",
									"//2: Tests",
									"",
									"pm.test(\"Verify status is 200\", function(){",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify response body and its structure\", function()",
									"{",
									"   pm.expect(jsonData.datas).to.eql(expected_datas);",
									"    ",
									"   //json schema",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "browserId",
								"value": "123",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/e-store/sales-data/items",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"sales-data",
								"items"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add a shopping cart",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "902b9b00-969b-438a-9807-dff419f4b190",
								"exec": [
									"//1: Variable",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"cartId\",",
									"        \"accountNumber\",",
									"        \"amountDue\"",
									"      ],",
									"      \"properties\": {",
									"        \"cartId\": {",
									"          \"$id\": \"#/properties/datas/properties/cartId\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Cartid Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            539",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10188\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"amountDue\": {",
									"          \"$id\": \"#/properties/datas/properties/amountDue\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Amountdue Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            0",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//1.1: Set Environment Variable",
									"pm.globals.set(\"cartId\", jsonData.datas.cartId);",
									"",
									"//2: Tests",
									"pm.test(\"Verify response data and its structure\", function()",
									"{",
									"    pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.datas.accountNumber).to.eql(pm.globals.get(\"accountNumber\"));",
									"    pm.expect(jsonData.datas.amountDue).to.eql(0);",
									"    pm.expect(jsonData.message).to.eql(\"Success！\");",
									"    ",
									"    //json schema",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify response status is 200\", function(){",
									"   pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							},
							{
								"key": "browserId",
								"value": "111",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "accountNumber",
									"value": "{{accountNumber}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/create",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"create"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add cleanser into the shopping cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1ccdd17d-3770-4306-ab6c-a0a51457ac50",
								"exec": [
									"//Set API request data",
									"pm.globals.set(\"itemId\", 5);",
									"",
									"pm.globals.set(\"quantity_of_a_item\", 5);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "00c72431-296c-4f53-9dda-0b65da2a41a2",
								"exec": [
									"//1: Variables",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"cartId\",",
									"        \"accountNumber\",",
									"        \"amountDue\"",
									"      ],",
									"      \"properties\": {",
									"        \"cartId\": {",
									"          \"$id\": \"#/properties/datas/properties/cartId\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Cartid Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            540",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10188\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"amountDue\": {",
									"          \"$id\": \"#/properties/datas/properties/amountDue\",",
									"          \"type\": \"number\",",
									"          \"title\": \"The Amountdue Schema\",",
									"          \"default\": 0.0,",
									"          \"examples\": [",
									"            139.5",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//1.1: Set Environment Variables",
									"    //Accumulate the quantity of cleanser in cart",
									"    pm.globals.set(\"cleanser_in_cart\", pm.globals.get(\"cleanser_in_cart\") + pm.globals.get(\"quantity_of_a_item\"));",
									"",
									"    var watch_amount_due = parseFloat(pm.globals.get(\"watch_in_cart\")) * parseFloat(pm.globals.get(\"watch_price\"));",
									"    var earring_amount_due = parseFloat(pm.globals.get(\"earrings_in_cart\")) * parseFloat(pm.globals.get(\"earrings_price\"));",
									"    var dresses_amount_due = parseFloat(pm.globals.get(\"dress_in_cart\")) * parseFloat(pm.globals.get(\"dress_price\"));",
									"    var receiver_amount_due = parseFloat(pm.globals.get(\"receiver_in_cart\")) * parseFloat(pm.globals.get(\"receiver_price\"));",
									"    var cleanser_amount_due = parseFloat(pm.globals.get(\"cleanser_in_cart\")) * parseFloat(pm.globals.get(\"cleanser_price\"));",
									"    ",
									"    ",
									"    pm.globals.set(\"amount_due\", watch_amount_due + earring_amount_due + dresses_amount_due + receiver_amount_due + cleanser_amount_due);",
									"    ",
									"    ",
									"",
									"    ",
									"//2: Tests",
									"pm.test(\"Verify response data and its structure\", function()",
									"{",
									"    pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.datas.cartId).to.eql(pm.globals.get(\"cartId\"));",
									"    pm.expect(jsonData.datas.accountNumber).to.eql(pm.globals.get(\"accountNumber\"));",
									"    //Verify amount due",
									"    pm.expect(jsonData.datas.amountDue).to.eql(pm.globals.get(\"amount_due\"));",
									"    ",
									"    pm.expect(jsonData.message).to.eql(\"Success！\");",
									"    ",
									"    //json schema",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify response status is 200\", function(){",
									"   pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "browserId",
								"value": "123",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "cartId",
									"value": "{{cartId}}",
									"type": "text"
								},
								{
									"key": "itemId",
									"value": "{{itemId}}",
									"type": "text"
								},
								{
									"key": "quantity",
									"value": "{{quantity_of_a_item}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/addItem",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"addItem"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add cleanser into the shopping cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1ccdd17d-3770-4306-ab6c-a0a51457ac50",
								"exec": [
									"//Set API request data",
									"pm.globals.set(\"itemId\", 5);",
									"",
									"pm.globals.set(\"quantity_of_a_item\", 10);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "00c72431-296c-4f53-9dda-0b65da2a41a2",
								"exec": [
									"//1: Variables",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"cartId\",",
									"        \"accountNumber\",",
									"        \"amountDue\"",
									"      ],",
									"      \"properties\": {",
									"        \"cartId\": {",
									"          \"$id\": \"#/properties/datas/properties/cartId\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Cartid Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            540",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10188\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"amountDue\": {",
									"          \"$id\": \"#/properties/datas/properties/amountDue\",",
									"          \"type\": \"number\",",
									"          \"title\": \"The Amountdue Schema\",",
									"          \"default\": 0.0,",
									"          \"examples\": [",
									"            139.5",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//1.1: Set Environment Variables",
									"    //Accumulate the quantity of cleanser in cart",
									"    pm.globals.set(\"cleanser_in_cart\", pm.globals.get(\"cleanser_in_cart\") + pm.globals.get(\"quantity_of_a_item\"));",
									"",
									"    var watch_amount_due = parseFloat(pm.globals.get(\"watch_in_cart\")) * parseFloat(pm.globals.get(\"watch_price\"));",
									"    var earring_amount_due = parseFloat(pm.globals.get(\"earrings_in_cart\")) * parseFloat(pm.globals.get(\"earrings_price\"));",
									"    var dresses_amount_due = parseFloat(pm.globals.get(\"dress_in_cart\")) * parseFloat(pm.globals.get(\"dress_price\"));",
									"    var receiver_amount_due = parseFloat(pm.globals.get(\"receiver_in_cart\")) * parseFloat(pm.globals.get(\"receiver_price\"));",
									"    var cleanser_amount_due = parseFloat(pm.globals.get(\"cleanser_in_cart\")) * parseFloat(pm.globals.get(\"cleanser_price\"));",
									"    ",
									"    ",
									"    pm.globals.set(\"amount_due\", watch_amount_due + earring_amount_due + dresses_amount_due + receiver_amount_due + cleanser_amount_due);",
									"    ",
									"    ",
									"",
									"    ",
									"//2: Tests",
									"pm.test(\"Verify response data and its structure\", function()",
									"{",
									"    pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.datas.cartId).to.eql(pm.globals.get(\"cartId\"));",
									"    pm.expect(jsonData.datas.accountNumber).to.eql(pm.globals.get(\"accountNumber\"));",
									"    //Verify amount due",
									"    pm.expect(jsonData.datas.amountDue).to.eql(pm.globals.get(\"amount_due\"));",
									"    ",
									"    pm.expect(jsonData.message).to.eql(\"Success！\");",
									"    ",
									"    //json schema",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify response status is 200\", function(){",
									"   pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "browserId",
								"type": "text",
								"value": "123"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "cartId",
									"value": "{{cartId}}",
									"type": "text"
								},
								{
									"key": "itemId",
									"value": "{{itemId}}",
									"type": "text"
								},
								{
									"key": "quantity",
									"value": "{{quantity_of_a_item}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/addItem",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"addItem"
							]
						}
					},
					"response": []
				},
				{
					"name": "Add receiver into the shopping cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "1ccdd17d-3770-4306-ab6c-a0a51457ac50",
								"exec": [
									"//Set API request data",
									"pm.globals.set(\"itemId\", 4);",
									"",
									"pm.globals.set(\"quantity_of_a_item\", 2);"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "00c72431-296c-4f53-9dda-0b65da2a41a2",
								"exec": [
									"//1: Variables",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"cartId\",",
									"        \"accountNumber\",",
									"        \"amountDue\"",
									"      ],",
									"      \"properties\": {",
									"        \"cartId\": {",
									"          \"$id\": \"#/properties/datas/properties/cartId\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Cartid Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            540",
									"          ]",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10188\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"amountDue\": {",
									"          \"$id\": \"#/properties/datas/properties/amountDue\",",
									"          \"type\": \"number\",",
									"          \"title\": \"The Amountdue Schema\",",
									"          \"default\": 0.0,",
									"          \"examples\": [",
									"            139.5",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//1.1: Set Environment Variables",
									"    //Accumulate the quantity of cleanser in cart",
									"    pm.globals.set(\"receiver_in_cart\", pm.globals.get(\"receiver_in_cart\") + pm.globals.get(\"quantity_of_a_item\"));",
									"",
									"    var watch_amount_due = parseFloat(pm.globals.get(\"watch_in_cart\")) * parseFloat(pm.globals.get(\"watch_price\"));",
									"    var earring_amount_due = parseFloat(pm.globals.get(\"earrings_in_cart\")) * parseFloat(pm.globals.get(\"earrings_price\"));",
									"    var dresses_amount_due = parseFloat(pm.globals.get(\"dress_in_cart\")) * parseFloat(pm.globals.get(\"dress_price\"));",
									"    var receiver_amount_due = parseFloat(pm.globals.get(\"receiver_in_cart\")) * parseFloat(pm.globals.get(\"receiver_price\"));",
									"    var cleanser_amount_due = parseFloat(pm.globals.get(\"cleanser_in_cart\")) * parseFloat(pm.globals.get(\"cleanser_price\"));",
									"    ",
									"    ",
									"    pm.globals.set(\"amount_due\", watch_amount_due + earring_amount_due + dresses_amount_due + receiver_amount_due + cleanser_amount_due);",
									"    ",
									"    ",
									"",
									"    ",
									"//2: Tests",
									"pm.test(\"Verify response data and its structure\", function()",
									"{",
									"    pm.expect(jsonData.code).to.eql(200);",
									"    pm.expect(jsonData.datas.cartId).to.eql(pm.globals.get(\"cartId\"));",
									"    pm.expect(jsonData.datas.accountNumber).to.eql(pm.globals.get(\"accountNumber\"));",
									"    //Verify amount due",
									"    pm.expect(jsonData.datas.amountDue).to.eql(pm.globals.get(\"amount_due\"));",
									"    ",
									"    pm.expect(jsonData.message).to.eql(\"Success！\");",
									"    ",
									"    //json schema",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify response status is 200\", function(){",
									"   pm.response.to.have.status(200); ",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "browserId",
								"type": "text",
								"value": "123"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "cartId",
									"value": "{{cartId}}",
									"type": "text"
								},
								{
									"key": "itemId",
									"value": "{{itemId}}",
									"type": "text"
								},
								{
									"key": "quantity",
									"value": "{{quantity_of_a_item}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/addItem",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"addItem"
							]
						}
					},
					"response": []
				},
				{
					"name": "delete cleanser from the shopping cart",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "bdba8732-7bec-4c56-9813-ab9ef654c613",
								"exec": [
									"//Set API request data",
									"pm.globals.set(\"itemId\", 5);",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "d19d0edf-bea0-41e2-9670-55d7d93322b0",
								"exec": [
									"//1: Variables",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"    \"definitions\": {},",
									"    \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"    \"$id\": \"http://example.com/root.json\",",
									"    \"type\": \"object\",",
									"    \"title\": \"The Root Schema\",",
									"    \"required\": [",
									"        \"code\",",
									"        \"datas\",",
									"        \"message\"",
									"    ],",
									"    \"properties\": {",
									"        \"code\": {",
									"            \"$id\": \"#/properties/code\",",
									"            \"type\": \"integer\",",
									"            \"title\": \"The Code Schema\",",
									"            \"default\": 0,",
									"            \"examples\": [",
									"                200",
									"            ]",
									"        },",
									"        \"datas\": {",
									"            \"$id\": \"#/properties/datas\",",
									"            \"type\": \"object\",",
									"            \"title\": \"The Datas Schema\",",
									"            \"required\": [",
									"                \"cartId\",",
									"                \"accountNumber\",",
									"                \"amountDue\"",
									"            ],",
									"            \"properties\": {",
									"                \"cartId\": {",
									"                    \"$id\": \"#/properties/datas/properties/cartId\",",
									"                    \"type\": \"integer\",",
									"                    \"title\": \"The Cartid Schema\",",
									"                    \"default\": 0,",
									"                    \"examples\": [",
									"                        546",
									"                    ]",
									"                },",
									"                \"accountNumber\": {",
									"                    \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"                    \"type\": \"string\",",
									"                    \"title\": \"The Accountnumber Schema\",",
									"                    \"default\": \"\",",
									"                    \"examples\": [",
									"                        \"10189\"",
									"                    ],",
									"                    \"pattern\": \"^(.*)$\"",
									"                },",
									"                \"amountDue\": {",
									"                    \"$id\": \"#/properties/datas/properties/amountDue\",",
									"                    \"type\": \"number\",",
									"                    \"title\": \"The Amountdue Schema\",",
									"                    \"default\": 0.0,",
									"                    \"examples\": [",
									"                        29.98",
									"                    ]",
									"                }",
									"            }",
									"        },",
									"        \"message\": {",
									"            \"$id\": \"#/properties/message\",",
									"            \"type\": \"string\",",
									"            \"title\": \"The Message Schema\",",
									"            \"default\": \"\",",
									"            \"examples\": [",
									"                \"Success！\"",
									"            ],",
									"            \"pattern\": \"^(.*)$\"",
									"        }",
									"    }",
									"}",
									"",
									"//1.1 Set Environment Variables",
									"pm.globals.set(\"cleanser_in_cart\", 0);",
									"",
									"pm.globals.set(\"amount_due\", (parseFloat(pm.globals.get(\"watch_in_cart\")) * parseFloat(pm.globals.get(\"watch_price\")) + parseFloat(pm.globals.get(\"dress_in_cart\")) * parseFloat(pm.globals.get(\"dress_price\")) + parseFloat(pm.globals.get(\"earrings_in_cart\")) * parseFloat(pm.globals.get(\"earrings_price\")) + parseFloat(pm.globals.get(\"receiver_in_cart\")) * parseFloat(pm.globals.get(\"receiver_price\")) + parseFloat(pm.globals.get(\"cleanser_in_cart\")) * parseFloat(pm.globals.get(\"cleanser_price\"))));",
									"",
									"//2: Tests",
									"pm.test(\"Status = 200\", function()",
									"{",
									"   pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify response body and its structure\", function()",
									"{",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"   ",
									"   pm.expect(jsonData.code).to.eql(200);",
									"   pm.expect(jsonData.datas.cartId).to.eql(pm.globals.get(\"cartId\"));",
									"   pm.expect(jsonData.datas.accountNumber).to.eql(pm.globals.get(\"accountNumber\"));",
									"   ",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"type": "text",
								"value": "application/x-www-form-urlencoded"
							},
							{
								"key": "browserId",
								"type": "text",
								"value": "123aasd"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/deleteItem?cartId={{cartId}}&itemId={{itemId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"deleteItem"
							],
							"query": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								},
								{
									"key": "itemId",
									"value": "{{itemId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Get new transaction number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "11ee3160-2a6a-4819-bad7-db4773b650ad",
								"exec": [
									"//1: Variables",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"transactionNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"transactionNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/transactionNumber\",",
									"          \"type\": \"integer\",",
									"          \"title\": \"The Transactionnumber Schema\",",
									"          \"default\": 0,",
									"          \"examples\": [",
									"            112",
									"          ]",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"",
									"//1: Set Environment Variables",
									"pm.globals.set(\"transaction_number\", jsonData.datas.transactionNumber);",
									"",
									"//2: Tests",
									"",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify response body and its structure\", function()",
									"{",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"   ",
									"   pm.expect(jsonData.code).to.eql(200);",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "GET",
						"header": [
							{
								"key": "browserId",
								"type": "text",
								"value": "asdf"
							},
							{
								"key": "browserId",
								"type": "text",
								"value": "asd",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{baseUrl}}/e-store/transaction/number",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"transaction",
								"number"
							]
						}
					},
					"response": []
				},
				{
					"name": "POST save new transaction",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "94566bbc-57e6-4a00-a00b-ec4fb3c13fd5",
								"exec": [
									"//Set API request data",
									"",
									"pm.globals.set(\"transaction_items\", JSON.stringify([{itemId: 5, itemName: 'CLEANSER', quantity: 2, price: 55.8}]));"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "11af7660-26bf-4962-ad53-430c8a6387a8",
								"exec": [
									"//1: Variables",
									"",
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"null\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"default\": null,",
									"      \"examples\": [",
									"        null",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//2: Tests",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"pm.test(\"Verify response body and its structure\", function()",
									"{",
									"   pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"   ",
									"   pm.expect(jsonData.code).to.eql(200);",
									"   pm.expect(jsonData.datas).to.eql(null);",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "POST",
						"header": [
							{
								"key": "browserId",
								"value": "afaf",
								"type": "text"
							},
							{
								"key": "Content-Type",
								"name": "Content-Type",
								"value": "application/x-www-form-urlencoded",
								"type": "text"
							}
						],
						"body": {
							"mode": "urlencoded",
							"urlencoded": [
								{
									"key": "transactionNumber",
									"value": "{{transaction_number}}",
									"type": "text"
								},
								{
									"key": "accountNumber",
									"value": "{{accountNumber}}",
									"type": "text"
								},
								{
									"key": "totalAmountDue",
									"value": "{{amount_due}}",
									"type": "text"
								},
								{
									"key": "items",
									"value": "{{transaction_items}}",
									"type": "text"
								}
							]
						},
						"url": {
							"raw": "{{baseUrl}}/e-store/transaction/save",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"transaction",
								"save"
							]
						}
					},
					"response": []
				},
				{
					"name": "TEARDOWN delete shopping cart we have just added",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "c62cef3b-7b6f-4c08-87e7-6781d67259b8",
								"exec": [
									"//0: Variable",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"object\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"required\": [",
									"        \"cartId\",",
									"        \"accountNumber\"",
									"      ],",
									"      \"properties\": {",
									"        \"cartId\": {",
									"          \"$id\": \"#/properties/datas/properties/cartId\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Cartid Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"427\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        },",
									"        \"accountNumber\": {",
									"          \"$id\": \"#/properties/datas/properties/accountNumber\",",
									"          \"type\": \"string\",",
									"          \"title\": \"The Accountnumber Schema\",",
									"          \"default\": \"\",",
									"          \"examples\": [",
									"            \"10178\"",
									"          ],",
									"          \"pattern\": \"^(.*)$\"",
									"        }",
									"      }",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"var jsonData = pm.response.json();",
									"",
									"//0.1: Environment Variables",
									"",
									"",
									"//Assertion tests",
									"pm.test(\"Verify response status is 200\", function()",
									"{",
									"   pm.response.to.have.status(200); ",
									"});",
									"",
									"pm.test(\"Verify response body againse json schema\", function(){",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify response body data\", function (){",
									"   pm.expect(jsonData.code).to.eql(200);",
									"   ",
									"   var ac = pm.globals.get(\"accountNumber\");",
									"   pm.expect(jsonData.datas.accountNumber).to.eql(ac);",
									"  ",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "bearer",
							"bearer": [
								{
									"key": "token",
									"value": "{{token}}",
									"type": "string"
								}
							]
						},
						"method": "DELETE",
						"header": [
							{
								"key": "browserId",
								"value": "123",
								"type": "text"
							}
						],
						"url": {
							"raw": "{{baseUrl}}/e-store/cart/delete?cartId={{cartId}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"cart",
								"delete"
							],
							"query": [
								{
									"key": "cartId",
									"value": "{{cartId}}"
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "TEARDOWN should delete the account with valid account number",
					"event": [
						{
							"listen": "test",
							"script": {
								"id": "f723202f-37ca-4286-ba39-af30b6089b68",
								"exec": [
									"var jsonData = pm.response.json();",
									"",
									"var schema = {",
									"  \"definitions\": {},",
									"  \"$schema\": \"http://json-schema.org/draft-07/schema#\",",
									"  \"$id\": \"http://example.com/root.json\",",
									"  \"type\": \"object\",",
									"  \"title\": \"The Root Schema\",",
									"  \"required\": [",
									"    \"code\",",
									"    \"datas\",",
									"    \"message\"",
									"  ],",
									"  \"properties\": {",
									"    \"code\": {",
									"      \"$id\": \"#/properties/code\",",
									"      \"type\": \"integer\",",
									"      \"title\": \"The Code Schema\",",
									"      \"default\": 0,",
									"      \"examples\": [",
									"        200",
									"      ]",
									"    },",
									"    \"datas\": {",
									"      \"$id\": \"#/properties/datas\",",
									"      \"type\": \"null\",",
									"      \"title\": \"The Datas Schema\",",
									"      \"default\": null,",
									"      \"examples\": [",
									"        null",
									"      ]",
									"    },",
									"    \"message\": {",
									"      \"$id\": \"#/properties/message\",",
									"      \"type\": \"string\",",
									"      \"title\": \"The Message Schema\",",
									"      \"default\": \"\",",
									"      \"examples\": [",
									"        \"Success！\"",
									"      ],",
									"      \"pattern\": \"^(.*)$\"",
									"    }",
									"  }",
									"}",
									"",
									"//Assertion tests",
									"",
									"pm.test(\"Verify status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    pm.expect(tv4.validate(jsonData, schema)).to.be.true;",
									"});",
									"",
									"pm.test(\"Verify the response msg\", function ()",
									"{",
									"   pm.expect(jsonData.message).to.eql(\"Success！\");",
									"});",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{baseUrl}}/e-store/authentication/delete?account_number={{accountNumber}}",
							"host": [
								"{{baseUrl}}"
							],
							"path": [
								"e-store",
								"authentication",
								"delete"
							],
							"query": [
								{
									"key": "account_number",
									"value": "{{accountNumber}}"
								}
							]
						}
					},
					"response": []
				}
			],
			"protocolProfileBehavior": {}
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"id": "8ac5b800-c254-48e4-870a-6c7fdf4e4f04",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"id": "f6ff4d85-bdba-40e3-8813-f04e1469bb80",
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"protocolProfileBehavior": {}
}